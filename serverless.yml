service: yapn-order-processor

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    TEXTBELT_API_KEY: ${env:TEXTBELT_API_KEY, 'textbelt'}
    SQUARE_ENVIRONMENT: ${env:SQUARE_ENVIRONMENT, 'production'}
    CATALOG_TABLE_NAME: ${env:CATALOG_TABLE_NAME, 'restaurant-catalog'}
    OAUTH_STATE_TABLE: ${env:OAUTH_STATE_TABLE, 'square-oauth-state'}
    MERCHANTS_TABLE: ${env:MERCHANTS_TABLE, 'square-merchants'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:UpdateItem
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/yapn-analytics
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/restaurant-catalog
        - Effect: Allow
          Action:
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/redbird-menu
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/square-oauth-state
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:Query
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/square-merchants
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/session-carts
        - Effect: Allow
          Action:
            - dynamodb:GetItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/phoneNumberClientMap
        - Effect: Allow
          Action:
            - dynamodb:GetItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/clientMenu
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:${self:provider.region}:*:secret:square-api-keys*
            - arn:aws:secretsmanager:${self:provider.region}:*:secret:square-oauth-keys*
            - arn:aws:secretsmanager:${self:provider.region}:*:secret:textbelt-api-key*

functions:
  handleInboundCall:
    handler: inbound-webhook.handleInboundCall
    events:
      - http:
          path: inbound-call
          method: post
          cors: true

  handlePostCallAnalysis:
    handler: postcall-analysis.handlePostCallAnalysis
    events:
      - http:
          path: postcall-analysis
          method: post
          cors: true

  addToCart:
    handler: cart.addToCart
    events:
      - http:
          path: add-to-cart
          method: post
          cors: true

  addToCartSandbox:
    handler: cart.addToCart
    events:
      - http:
          path: sandbox/add-to-cart
          method: post
          cors: true

  removeFromCart:
    handler: cart.removeFromCart
    events:
      - http:
          path: remove-from-cart
          method: post
          cors: true

  removeFromCartSandbox:
    handler: cart.removeFromCart
    events:
      - http:
          path: sandbox/remove-from-cart
          method: post
          cors: true

  getCartSummary:
    handler: cart.getCartSummary
    events:
      - http:
          path: get-cart-summary
          method: post
          cors: true

  getCartSummarySandbox:
    handler: cart.getCartSummary
    events:
      - http:
          path: sandbox/get-cart-summary
          method: post
          cors: true

  upsell:
    handler: cart.upsell
    events:
      - http:
          path: upsell
          method: post
          cors: true

  upsellSandbox:
    handler: cart.upsell
    events:
      - http:
          path: sandbox/upsell
          method: post
          cors: true

  createPaymentLink:
    handler: createPaymentLink.createPaymentLink
    events:
      - httpApi:
          path: /create-payment-link
          method: post

  createPaymentLinkSandbox:
    handler: createPaymentLink.createPaymentLink
    events:
      - httpApi:
          path: /sandbox/create-payment-link
          method: post

  createOrderAndPaymentLink:
    handler: createOrderAndPaymentLink.createOrderAndPaymentLink
    events:
      - httpApi:
          path: /create-order-payment-link
          method: post
    timeout: 60  # Increase to 60 seconds for complete workflow
    memorySize: 512  # Increase memory for better performance

  createOrderAndPaymentLinkSandbox:
    handler: createOrderAndPaymentLink.createOrderAndPaymentLink
    events:
      - httpApi:
          path: /sandbox/create-order-payment-link
          method: post
    timeout: 60  # Increase to 60 seconds for complete workflow
    memorySize: 512  # Increase memory for better performance

  syncCatalog:
    handler: syncCatalog.syncCatalog
    events:
      - httpApi:
          path: /sync-catalog
          method: post
    timeout: 300  # 5 minutes for catalog sync

  syncCatalogSandbox:
    handler: syncCatalog.syncCatalog
    events:
      - httpApi:
          path: /sandbox/sync-catalog
          method: post
    timeout: 300  # 5 minutes for catalog sync

  getCatalog:
    handler: syncCatalog.getCatalog
    events:
      - httpApi:
          path: /get-catalog
          method: get
      - httpApi:
          path: /get-catalog
          method: post

  getCatalogSandbox:
    handler: syncCatalog.getCatalog
    events:
      - httpApi:
          path: /sandbox/get-catalog
          method: get
      - httpApi:
          path: /sandbox/get-catalog
          method: post

  squareAuthorize:
    handler: squareAuthorize.authorize
    events:
      - httpApi:
          path: /square/authorize
          method: get
    timeout: 30

  squareCallback:
    handler: squareCallback.callback
    events:
      - httpApi:
          path: /square/callback
          method: get
    timeout: 30

resources:
  Resources:
    YapnAnalyticsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: yapn-analytics
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: restaurant_phone
            AttributeType: S
        KeySchema:
          - AttributeName: restaurant_phone
            KeyType: HASH

    RestaurantCatalogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: restaurant-catalog
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: agent_number
            AttributeType: S
          - AttributeName: item_name
            AttributeType: S
        KeySchema:
          - AttributeName: agent_number
            KeyType: HASH      # Partition Key
          - AttributeName: item_name
            KeyType: RANGE     # Sort Key

    SquareOAuthStateTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: square-oauth-state
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expires_at
          Enabled: true

    SquareMerchantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: square-merchants
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: restaurant_id
            AttributeType: S
          - AttributeName: merchant_id
            AttributeType: S
        KeySchema:
          - AttributeName: restaurant_id
            KeyType: HASH      # Partition Key
        GlobalSecondaryIndexes:
          - IndexName: MerchantIdIndex
            KeySchema:
              - AttributeName: merchant_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    # RedbirdMenuTable already exists, commenting out to avoid deployment conflicts
    # RedbirdMenuTable:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: redbird-menu
    #     BillingMode: PAY_PER_REQUEST
    #     AttributeDefinitions:
    #       - AttributeName: item_name
    #         AttributeType: S
    #       - AttributeName: variation
    #         AttributeType: S
    #     KeySchema:
    #       - AttributeName: item_name
    #         KeyType: HASH      # Partition Key
    #       - AttributeName: variation
    #         KeyType: RANGE     # Sort Key

    SessionCartsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: session-carts
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: call_id
            AttributeType: S
        KeySchema:
          - AttributeName: call_id
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000 